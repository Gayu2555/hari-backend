generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  name      String
  email     String   @unique
  phone     String?
  password  String
  avatar    String?
  
  // Settings
  notificationsEnabled Boolean @default(true)
  darkModeEnabled      Boolean @default(false)
  autoPlayVideos       Boolean @default(true)
  language             String  @default("id")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  favorites Favorite[]
  reviews   Review[]
  recipes   Recipe[]
  refreshTokens RefreshToken[]
  
  @@map("users")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("refresh_tokens")
}

model Recipe {
  id          Int      @id @default(autoincrement())
  title       String
  description String?  @db.Text
  image       String?  @db.Text
  category    String?
  prepTime    Int?
  cookTime    Int?
  servings    Int?
  isPublic    Boolean  @default(true)
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  ingredients Ingredient[]
  steps       RecipeStep[]
  favorites   Favorite[]
  reviews     Review[]

  @@map("recipes")
}

model Ingredient {
  id       Int     @id @default(autoincrement())
  name     String
  quantity Float?
  unit     String?
  recipeId Int
  recipe   Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
   order    Int    @default(0) 

  @@map("ingredients")
}

model RecipeStep {
  id          Int    @id @default(autoincrement())
  stepNumber  Int
  description String @db.Text
  recipeId    Int
  recipe      Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@map("recipe_steps")
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    Int
  recipeId  Int
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
  @@map("favorites")
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String?  @db.Text
  userId    Int
  recipeId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
  @@map("reviews")
}